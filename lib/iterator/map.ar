pub mod lib::iterator;

use lib::compare::{iterator::{Iterator}};

pub struct Map<TIterator, TFunc> {
    iterator: TIterator,
    mapper: TFunc
}

pub fun map<TIter, TFrom, TTo>(
    self: TIter,
    mapper: fun(TFrom): TTo): Map<Self, TFrom, TTo>
where TIter: Iterator<Self::Item = TFrom> => {
    Map { self: self, mapper: mapper  }
}

imp<T, TIterator, TFunc> Iterator for Map<TIterator, TFunc> {
    type Item = T;

    fun next(self: Self): Option<Self::Item> => {
        self.iterator.next() match
        | Some { value } => Some(self.mapper(value)),
        | None => None
    }
}

// Other Spell
pub mod iterator_extensions;

pub struct Closest<TIterator, TType, TOperand> {
    iterator: TIterator,
    selector: fun(TType): TOperand,
    comparer: fun(TOperand, TOperand): Ordering,
}

pub fun closest<TIter, TType, TOperand>(
    self: TIter,
    selector: fun(TType): TOperand,
    comparer: fun(TOperand, TOperand): Ordering): Closest<Self, TType, TOperand>
where TIter: Iterator<Self::Item = TType> {
    Closest { self: self, selector: selector, comparer: comparer  }
}

imp<T, TIterator, TType, TOperand> Iterator for Closest<TIterator, TType, TOperand> {
    type Item = T;

    fun next(self: &mut Self): Option<Self::Item> => {
        let mut closest = None;

        for item in self.iterator => {
            let closest_operand = closest match 
            | Some { item: item } => self.selector(item),
            | None => {
                closest = Some(item);
                continue;
            };

            let operand = self.selector(item);
            let ordering = self.comparer(operand, closest_operand);

            if ordering == Ordering::Less => closest = Some(item); 
        }

        closest
    }
}
