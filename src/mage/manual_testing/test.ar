// This is a comment
/- This is a block comment -/
/-
 - Block comments can be on multiple lines
 -/

// This is a struct
struct Struct {
    // This is a field
    field: string,
    // This is also a field
    field_2: int,
    // This is also a field
    field_3: float,
    // This comment should be allowed
}

// This is a struct with a generic parameter
struct A<T> {
    field: T
}

// This is an enum
enum Enum {
    // This is an enum variant with a field
    A {
        // This is a field
        field: string,
        field_2: int,
        // This comment should be allowed
    },
    // This is an enum variant with multiple fields of different types
    B { field_1: string, field_2: int },
    // This is an enum variant without fields
    C,
    // This comment should be allowed
}

// This enum has a generic parameter
enum Option<T> {
    Some { value: T },
    None
}

// This is a union of literals
// All literals must be of the same type
union HeaderLevel {
    // These are the tree first literals
    1, 2, 3,
    // These are the tree last literals
    4, 5, 6,
    // This comment should be allowed
}

type Number = int | uint | float | unit;

// This is a function declaration
fun to_string(x: HeaderLevel): string => {
    // This is an if expression
    if x == 1 => {
        // This is a return statement
        return "1"
    };

    false
    unit

    //There are several more of them
    if x == 2 => return "2"
    if x == 3 => return "3"
    if x == 4 => return "4"
    if x == 5 => return "5"
    if x == 6 => return "6"
}

// Here's another function declaration
// It has a closure as its last parameter
fun header(level: HeaderLevel, header: string, append: fun(): string): string => {
    // This is a variable declaration with an initializer
    let mut text = "\n";

    let mut i = 0;

    // This is a while loop
    while i < level => {
        // This is a compound assignment
        text += "#";
        i += 1;
    }

    text += " ";

    // This is a function call
    text += append()
}

fun text(append: fun(): string): string => "\n" + append()

header(4, "Title") -> {
    text -> { "This is a bit of text" }
    +
    text -> { "This is another bit of text" }
}

4:header("Title") -> {
    text -> { "This is a bit of text" }
    +
    text -> { "This is another bit of text" }
}

// This is a for loop using a range expression to iterate over
for i in let x = 0..20 => {
    if i > 15 => break 1..=100 // This is a break statement
} else { // This is the for loop's else block
    x
}

let x = |x: int, y: int|: int => x + y

// This is a for loop where the blocks are removed
let range = 0..20
for i in let x = range => {
    let mut x = 0;
    x += i
}
else x // The for loops else body is a single expression

let mut i = 0;

while i < 3 => {
    Struct { 
        field: "field"
    }

    i += 1
    print(i)

    // This is a break statement which breaks only when i is 4
    // In this case, the else block is not executed
    if i == 4 => break;
}
else print("Hello World") // This is the while loop's else block

if value => {
    10
} else if value2 => {
    20
} else {
    30
};

|| 5

// Match on many different literals
// Running this will crash cause its different types being matches against
// unit match
// | _ => 100,
// | unit => 200,
// | 1 => 300,
// | 1u => 400,
// | true => 500, 
// | false => 600,
// | 'a' => 700,
// | "hello" => 800,
// | 1.0 => 900,
// | 1.0f => 1000

for x in [1, 2, 3,] => {
    print(x)
}

A::<int> { value: 5 }

Option::<string>::Some { value: "Hello" }
