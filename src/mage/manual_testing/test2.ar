enum Expr {
    Identifier { name: String },
    BinaryExpr { left: Box<Expr>, operator: BinaryOperator, right: Box<Expr> },
    UnaryExpr { name: String },
    UnaryExpr { name: String },
}

enum BinaryOperator {
    Plus,
    Minus,
    Multiply,
    Divide,
    Modulus,
}

type TypedExpr = Expr && type_: Type;

// becomes
// enum TypedExpr {
//     type_: Type,
//     Identifier { name: String },
//     BinaryExpr { left: Box<Expr>, operator: BinaryOperator, right: Box<Expr> },
//     UnaryExpr { name: String },
//     UnaryExpr { name: String },
// }
