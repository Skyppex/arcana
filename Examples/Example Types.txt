public struct Vector2 // struct declaration
    public f32 X // field declaration
    public f32 Y // field declaration

implement Vector2 // implement declaration for Vector2 which is a struct
    public: // everything after this is publicly accessible
        f32 Magnitude // property declaration
            get // property has a get accessor
                return (X * X + Y * Y).Sqrt() // returns the result of this equation

        Vector2 Normalized // property declaration
            get  // property has a get accessor
                return Vector2 { X, Y }.Normalize() // struct literal followed by a function call

        Normalize() // function declaration
            f32 magnitude = Magnitude // variable declaration and assigment operation
            
            if magnitude > 0f // if statement
                X /= magnitude // divide and assign operator
                Y /= magnitude // divide and assign operator
            else // else statement
                X = 0f // assignment operation
                Y = 0f // assignment operation
        
public struct Memorizer<TArg, TResult, TFn> // struct declaration with generics
where TFn : Function // generic constraints
    HashMap<TArg, TResult> _memory // field declaration
    TFn _function // field declaration

implement<TArg, TResult, TFn> Memorizer<TArg, TResult, TFn> // implement declaration for Memorizer must specify generics which can be passed to the Memorizer. This way you can use these generic types inside the implement block.
    public: // everything after this is publicly accessible
        TResult Get(TArg arg) // function declaration with a return type of TResult and a parameter of TArg named arg
            if _memory.Contains(arg) // if statement with a function call passing in arg
                return _memory.Get(arg) // returns the value contained in the _memory HashMap

            return AddToMemory() // returns the value which in turn is returned by the function call

    private:
        TResult AddToMemory(TArg arg)
            TResult result = _function(arg) // variable declaration assigned to the result of the _function variable being invoked passing in arg as an argument
            _memory.Add(arg, result) // adding the value of the result value into the HashMap with arg as the key
            return result // returns the result


public enum Direction // enum declaration
    Up // enum variant
    Down // enum variant
    Left // enum variant
    Right // enum variant

implement Direction // implement declaration for Direction which is an enum
    public: // everything after this is publicly accessible
        Direction Flip() // function declaration with a return type of Direction
            return match { // match expression -> It should guaranteed that the match expression covers all possible cases
                Up => Down // match expression arm
                Down => Up // match expression arm
                Left => Right // match expression arm
                Right => Left // match expression arm
            }

implement Direction.Up // implement declaration for Direction.Up which is an enum variant
    public: // everything after this is publicly accessible
        void ToRight(mut self) // function declaration with a parameter of self which is mutable
            self = Direction.Right // assignment operation

implement Direction.Down // implement declaration for Direction.Down which is an enum variant
    public: // everything after this is publicly accessible
        void ToLeft(mut self) // function declaration with a parameter of self which is mutable
            self = Direction.Left // assignment operation

implement Direction.Left // implement declaration for Direction.Left which is an enum variant
    public: // everything after this is publicly accessible
        void ToUp(mut self) // function declaration with a parameter of self which is mutable
            self = Direction.Up // assignment operation

implement Direction.Right // implement declaration for Direction.Right which is an enum variant
    public: // everything after this is publicly accessible
        void ToDown(mut self) // function declaration with a parameter of self which is mutable
            self = Direction.Down // assignment operation